syntax = "proto3";

import "google/protobuf/any.proto";

package goatorepo;
option go_package = "./goatorepo";
option java_package = "no.neat.goatorepo";

// Top-level message used for all GOAT communications.
message Rpc {
    // Analogous to a "Stream Identifier" in HTTP/2: allocated by the initator of an RPC, a
    // unique identifier used to group requests and responses specific to this request.
    uint64 id = 1;
    // Information identifying the request to be made; hence always set in the initial
    // request. At a minimum in such a request, the RPC method to be invoked is set. This
    // information is transferred in the URL path in HTTP/2.
    RequestHeader header = 2;
    // When a request finishes, it is explicitly marked with a status code, and
    // with trailers. In HTTP/2 this is communicated with a HEADERS frame following the
    // response DATA frame, with certain canonical headers set like `grpc-status`.
    ResponseStatus status = 3;
    // The actual RPC request or response data: just some opaque bytes, this is usually
    // protobuf-serialised bytes.
    Body body = 4;
    // Like status, this is sent as part of a response, and allows arbitrary key/values
    // to be communicated. This maps onto "Trailers" in the HTTP/2 encoding, but without
    // status-code, which is encoded explicitly above.
    Trailer trailer = 5;
    // Abnormal reset information, like RST_STREAM in HTTP/2.
    Reset reset = 6;
}

message RequestHeader {
    string method = 1;
    repeated KeyValue headers = 2;
    string source = 3;
    string destination = 4;
    repeated string proxy_record = 5;
    repeated string proxy_next = 6;
}

// Based on https://cloud.google.com/apis/design/errors
// See: https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto
message ResponseStatus {
    int32 code = 1;
    string message = 2;
    repeated google.protobuf.Any details = 3;
}

message KeyValue {
    string key = 1;
    string value = 2;
}

message Body {
    bytes data = 1;
}

// Signals that a stream is done. Used only as a response.
message Trailer {
    repeated KeyValue metadata = 1;
}

message Reset {
    string type = 1;
}
